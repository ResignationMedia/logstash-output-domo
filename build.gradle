import java.nio.file.Files
import java.nio.file.Paths
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
apply plugin: "java"
apply plugin: 'maven'
apply plugin: "distribution"
apply plugin: "idea"

group "org.logstash.outputs"

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    maven {
        url  "http://dl.bintray.com/domoinc/domo-java-sdk"
    }
}

dependencies {
  compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.47'
  compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.7.0'
  compile group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '3.7.0'
  compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
  compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.3.0'

  compile 'org.slf4j:slf4j-api:1.7.21'
  compile 'com.squareup.okio:okio:2.1.0'
  compile 'com.domo:domo-java-sdk-all:0.4.0'
}

task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-output-domo_jars.rb')
        jars_file.newWriter().withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            configurations.runtime.allDependencies.each {
                w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
            }
        }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        configurations.runtime.allDependencies.each { dep ->
            File f = configurations.runtime.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
            String groupPath = dep.group.replaceAll('\\.', '/')
            File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
            newJarFile.mkdirs()
            Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
        }
    }
}

vendor.dependsOn(generateGemJarRequiresFile)
